// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (shop_id, name, description, price, stock, category, image_urls)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, shop_id, name, description, price, stock, category, image_urls, created_at, updated_at
`

type CreateProductParams struct {
	ShopID      uuid.UUID      `json:"shop_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Price       string         `json:"price"`
	Stock       int32          `json:"stock"`
	Category    string         `json:"category"`
	ImageUrls   []string       `json:"image_urls"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ShopID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Stock,
		arg.Category,
		pq.Array(arg.ImageUrls),
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.Category,
		pq.Array(&i.ImageUrls),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const filterProductsByCategory = `-- name: FilterProductsByCategory :many
SELECT id, shop_id, name, description, price, stock, category, image_urls, created_at, updated_at FROM products
WHERE category = $1
ORDER BY created_at
LIMIT $2 OFFSET $3
`

type FilterProductsByCategoryParams struct {
	Category string `json:"category"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) FilterProductsByCategory(ctx context.Context, arg FilterProductsByCategoryParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, filterProductsByCategory, arg.Category, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ShopID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.Category,
			pq.Array(&i.ImageUrls),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterProductsByPrice = `-- name: FilterProductsByPrice :many
SELECT id, shop_id, name, description, price, stock, category, image_urls, created_at, updated_at FROM products
WHERE price BETWEEN $1 AND $2
ORDER BY created_at
LIMIT $3 OFFSET $4
`

type FilterProductsByPriceParams struct {
	Price   string `json:"price"`
	Price_2 string `json:"price_2"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) FilterProductsByPrice(ctx context.Context, arg FilterProductsByPriceParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, filterProductsByPrice,
		arg.Price,
		arg.Price_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ShopID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.Category,
			pq.Array(&i.ImageUrls),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, shop_id, name, description, price, stock, category, image_urls, created_at, updated_at FROM products
WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.Category,
		pq.Array(&i.ImageUrls),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductsByShopID = `-- name: GetProductsByShopID :many
SELECT id, shop_id, name, description, price, stock, category, image_urls, created_at, updated_at FROM products
WHERE shop_id = $1
ORDER BY created_at
LIMIT $2 OFFSET $3
`

type GetProductsByShopIDParams struct {
	ShopID uuid.UUID `json:"shop_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetProductsByShopID(ctx context.Context, arg GetProductsByShopIDParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductsByShopID, arg.ShopID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ShopID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.Category,
			pq.Array(&i.ImageUrls),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, shop_id, name, description, price, stock, category, image_urls, created_at, updated_at FROM products
ORDER BY created_at
LIMIT $1 OFFSET $2
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ShopID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.Category,
			pq.Array(&i.ImageUrls),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProducts = `-- name: SearchProducts :many
SELECT id, shop_id, name, description, price, stock, category, image_urls, created_at, updated_at FROM products
WHERE name ILIKE $1 OR description ILIKE $1
ORDER BY created_at
LIMIT $2 OFFSET $3
`

type SearchProductsParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) SearchProducts(ctx context.Context, arg SearchProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, searchProducts, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ShopID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.Category,
			pq.Array(&i.ImageUrls),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = $2, description = $3, price = $4, 
    stock = $5, category = $6, image_urls = $7, updated_at = now()
WHERE id = $1
RETURNING id, shop_id, name, description, price, stock, category, image_urls, created_at, updated_at
`

type UpdateProductParams struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Price       string         `json:"price"`
	Stock       int32          `json:"stock"`
	Category    string         `json:"category"`
	ImageUrls   []string       `json:"image_urls"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Stock,
		arg.Category,
		pq.Array(arg.ImageUrls),
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.Category,
		pq.Array(&i.ImageUrls),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
