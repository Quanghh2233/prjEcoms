// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: orders.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addOrderItem = `-- name: AddOrderItem :one
INSERT INTO order_items (order_id, product_id, quantity, price_at_purchase)
VALUES ($1, $2, $3, $4)
RETURNING id, order_id, product_id, quantity, price_at_purchase, created_at
`

type AddOrderItemParams struct {
	OrderID         uuid.UUID `json:"order_id"`
	ProductID       uuid.UUID `json:"product_id"`
	Quantity        int32     `json:"quantity"`
	PriceAtPurchase string    `json:"price_at_purchase"`
}

func (q *Queries) AddOrderItem(ctx context.Context, arg AddOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, addOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.PriceAtPurchase,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.PriceAtPurchase,
		&i.CreatedAt,
	)
	return i, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (user_id, total_amount, shipping_address)
VALUES ($1, $2, $3)
RETURNING id, user_id, shop_id, total_amount, status, shipping_address, created_at, updated_at
`

type CreateOrderParams struct {
	UserID          uuid.UUID `json:"user_id"`
	TotalAmount     string    `json:"total_amount"`
	ShippingAddress string    `json:"shipping_address"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.UserID, arg.TotalAmount, arg.ShippingAddress)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ShopID,
		&i.TotalAmount,
		&i.Status,
		&i.ShippingAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, shop_id, total_amount, status, shipping_address, created_at, updated_at FROM orders
WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ShopID,
		&i.TotalAmount,
		&i.Status,
		&i.ShippingAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderItems = `-- name: GetOrderItems :many
SELECT id, order_id, product_id, quantity, price_at_purchase, created_at FROM order_items
WHERE order_id = $1
`

func (q *Queries) GetOrderItems(ctx context.Context, orderID uuid.UUID) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.PriceAtPurchase,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderStatistics = `-- name: GetOrderStatistics :one
SELECT 
    COUNT(*) as total_orders,
    SUM(total_amount) as total_revenue
FROM orders
WHERE shop_id = $1 AND created_at >= $2 AND created_at <= $3
`

type GetOrderStatisticsParams struct {
	ShopID      uuid.UUID `json:"shop_id"`
	CreatedAt   time.Time `json:"created_at"`
	CreatedAt_2 time.Time `json:"created_at_2"`
}

type GetOrderStatisticsRow struct {
	TotalOrders  int64 `json:"total_orders"`
	TotalRevenue int64 `json:"total_revenue"`
}

func (q *Queries) GetOrderStatistics(ctx context.Context, arg GetOrderStatisticsParams) (GetOrderStatisticsRow, error) {
	row := q.db.QueryRowContext(ctx, getOrderStatistics, arg.ShopID, arg.CreatedAt, arg.CreatedAt_2)
	var i GetOrderStatisticsRow
	err := row.Scan(&i.TotalOrders, &i.TotalRevenue)
	return i, err
}

const getOrdersByUserID = `-- name: GetOrdersByUserID :many
SELECT id, user_id, shop_id, total_amount, status, shipping_address, created_at, updated_at FROM orders
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetOrdersByUserIDParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetOrdersByUserID(ctx context.Context, arg GetOrdersByUserIDParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ShopID,
			&i.TotalAmount,
			&i.Status,
			&i.ShippingAddress,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET status = $2, updated_at = now()
WHERE id = $1
RETURNING id, user_id, shop_id, total_amount, status, shipping_address, created_at, updated_at
`

type UpdateOrderStatusParams struct {
	ID     uuid.UUID   `json:"id"`
	Status OrderStatus `json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrderStatus, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ShopID,
		&i.TotalAmount,
		&i.Status,
		&i.ShippingAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
