// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: shops.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createShop = `-- name: CreateShop :one
INSERT INTO shops (user_id, name, description, logo_url)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, name, description, logo_url, created_at, updated_at
`

type CreateShopParams struct {
	UserID      uuid.UUID      `json:"user_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	LogoUrl     sql.NullString `json:"logo_url"`
}

func (q *Queries) CreateShop(ctx context.Context, arg CreateShopParams) (Shop, error) {
	row := q.db.QueryRowContext(ctx, createShop,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.LogoUrl,
	)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.LogoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShopByID = `-- name: GetShopByID :one
SELECT id, user_id, name, description, logo_url, created_at, updated_at FROM shops
WHERE id = $1
`

func (q *Queries) GetShopByID(ctx context.Context, id uuid.UUID) (Shop, error) {
	row := q.db.QueryRowContext(ctx, getShopByID, id)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.LogoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShopsByUserID = `-- name: GetShopsByUserID :many
SELECT id, user_id, name, description, logo_url, created_at, updated_at FROM shops
WHERE user_id = $1
`

func (q *Queries) GetShopsByUserID(ctx context.Context, userID uuid.UUID) ([]Shop, error) {
	rows, err := q.db.QueryContext(ctx, getShopsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shop{}
	for rows.Next() {
		var i Shop
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.LogoUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listShops = `-- name: ListShops :many
SELECT id, user_id, name, description, logo_url, created_at, updated_at FROM shops
ORDER BY created_at
LIMIT $1 OFFSET $2
`

type ListShopsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListShops(ctx context.Context, arg ListShopsParams) ([]Shop, error) {
	rows, err := q.db.QueryContext(ctx, listShops, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shop{}
	for rows.Next() {
		var i Shop
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.LogoUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchShops = `-- name: SearchShops :many
SELECT id, user_id, name, description, logo_url, created_at, updated_at FROM shops
WHERE name ILIKE $1 OR description ILIKE $1
ORDER BY created_at
LIMIT $2 OFFSET $3
`

type SearchShopsParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) SearchShops(ctx context.Context, arg SearchShopsParams) ([]Shop, error) {
	rows, err := q.db.QueryContext(ctx, searchShops, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shop{}
	for rows.Next() {
		var i Shop
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.LogoUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShop = `-- name: UpdateShop :one
UPDATE shops
SET name = $2, description = $3, logo_url = $4, updated_at = now()
WHERE id = $1
RETURNING id, user_id, name, description, logo_url, created_at, updated_at
`

type UpdateShopParams struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	LogoUrl     sql.NullString `json:"logo_url"`
}

func (q *Queries) UpdateShop(ctx context.Context, arg UpdateShopParams) (Shop, error) {
	row := q.db.QueryRowContext(ctx, updateShop,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.LogoUrl,
	)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.LogoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
